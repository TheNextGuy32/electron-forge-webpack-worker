{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;ACJnB;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;;;;;WCAA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;;AClBA,QAAQ,MAAM,EAAE,mBAAO,CAAC,0BAAU;AAClC,QAAQ,SAAS,EAAE,mBAAO,CAAC,sCAAgB;AAC3C,QAAQ,WAAW,EAAE,mBAAO,CAAC,yCAAc;AAC3C;AACA;AACA;AACA;AACA,wCAAwC,uHAAwC;AAChF;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,4DAA4D,KAAK;AACjE;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://forge-webpack-webworkers/./src/dependency.js","webpack://forge-webpack-webworkers/external node-commonjs \"electron\"","webpack://forge-webpack-webworkers/external node-commonjs \"worker_threads\"","webpack://forge-webpack-webworkers/webpack/bootstrap","webpack://forge-webpack-webworkers/webpack/runtime/hasOwnProperty shorthand","webpack://forge-webpack-webworkers/webpack/runtime/publicPath","webpack://forge-webpack-webworkers/webpack/runtime/require chunk loading","webpack://forge-webpack-webworkers/./src/main.js"],"sourcesContent":["const doAThing = async (source) => {\r\n    console.log(`do a thing using ${source}`);\r\n}\r\n\r\nmodule.exports = { doAThing };\r\n","module.exports = require(\"electron\");","module.exports = require(\"worker_threads\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"\";","__webpack_require__.b = require(\"url\").pathToFileURL(__filename);\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t\"main\": 1\n};\n\n// no on chunks loaded\n\n// no chunk install function needed\n\n// no chunk loading\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","const { app } = require('electron');\r\nconst { Worker } = require('worker_threads');\r\nconst { doAThing } = require('./dependency');\r\n\r\nconst createDependencyWorker = () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const worker = new Worker(new URL(`./dependencyWorker.js`, import.meta.url));\r\n\r\n      worker.on('message', (message) => {\r\n        if (message.success !== undefined) {\r\n          if (message.success) {            \r\n            resolve(message.data);\r\n          } else {\r\n            reject(new Error(message.error));\r\n          }\r\n        } else if (message.type === 'log') {\r\n          console.log(message.log);\r\n        }\r\n      });\r\n\r\n      worker.on('error', (err) => {\r\n        console.error('Worker error:', err);\r\n        reject(err);\r\n      });\r\n      \r\n      worker.on('exit', (code) => {\r\n        if (code !== 0) {\r\n          reject(new Error(`Worker stopped with exit code ${code}`));\r\n        }\r\n      });\r\n    } catch (err) {\r\n      console.error('Failed to create worker:', err);\r\n      reject(err);\r\n    }\r\n  });\r\n}\r\n\r\napp.whenReady().then(async () => {\r\n  // createWindow();\r\n  await doAThing(\"main\");\r\n  await createDependencyWorker();\r\n  app.quit();\r\n});"],"names":[],"sourceRoot":""}